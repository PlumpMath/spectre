aspect_writer(msgTypes) ::= <<

package skadistats.spectre;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.DataOutputStream;
import java.util.List;
import java.util.LinkedList;
import org.apache.mahout.math.Varint;

import skadistats.spectre.err.OutOfOrderWrite;
import skadistats.spectre.proto.Util;


public class AspectWriter {
    protected String baseDir;
    protected int replayId; 
    protected int tick;
    protected List strTable; 
    protected OutputStream out;

    public AspectWriter(String baseDir, int replayId) {
        this.baseDir = baseDir;
        this.replayId = replayId;
        this.tick = 0;
        this.strTable = new LinkedList<String>();
        this.out = null;
    }

    protected void writeBytes(int msgType, byte[] data) throws IOException {
        DataOutputStream dout = new DataOutputStream(this.out);
        // write msg_type
        Varint.writeUnsignedVarInt(msgType, dout);
        // write data
        dout.write(data);
    }

    public int indexString(String str) {
        int strIdx = this.strTable.indexOf(str);
        if (strIdx == -1) {
            strIdx = this.strTable.size();
            this.strTable.add(str);
        }
        return strIdx;
    }

    public void setTick(int tick) throws IOException {
        if (tick < this.tick)
            throw new OutOfOrderWrite(tick+" < "+this.tick);
        else if (tick > this.tick) {
            Util.Segment segment = Util.Segment.newBuilder()
                .setTick(tick)
                .build();
            this.writeBytes(0, segment.toByteArray());
            this.tick = tick;
        } else {
            // do nothing
        }
    }

    public static AspectWriter newWriter(String baseDir, String aspectPath, int replayId) {

        $msgTypes:instantiate_msg_type()$

        throw new RuntimeException("Unknown Aspect: "+aspectPath);
    }

    $msgTypes:define_writers()$

    public void finish() throws IOException {
        // write string table
        Util.StringTable stable = Util.StringTable.newBuilder()
            .addAllValue(this.strTable)
            .build();
        this.writeBytes(2, stable.toByteArray());
        this.out.close();
    }
}
>>

instantiate_msg_type(msgType) ::= <<
if (aspectPath.equals("$msgType.aspectPath$")) {
    return new $msgType.readWritePkg$.Writer(baseDir, replayId);
}
>>

define_writers(msgType) ::= <<
public void write($msgType.protoPkg$.$msgType.protoFullCls$ msg) throws IOException {
    throw new RuntimeException("Incorrect Writer instantiated");
}
>>
