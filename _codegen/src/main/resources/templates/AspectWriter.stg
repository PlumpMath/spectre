aspect_writer(msgTypes) ::= <<

package skadistats.spectre;

import java.io.IOException;
import java.io.OutputStream;
import java.io.DataOutputStream;
import java.nio.ByteBuffer;
import java.util.List;
import java.util.LinkedList;
import org.apache.mahout.math.Varint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import skadistats.spectre.err.*;
import skadistats.spectre.persist.AspectSerializer;


public class AspectWriter {
    private final Logger log = LoggerFactory.getLogger(getClass());

    protected int tick;
    protected List<String> strTable; 
    protected AspectSerializer ser;

    public AspectWriter(AspectSerializer ser) {
        this.ser = ser;
        this.strTable = new LinkedList<String>();
    }

    public int indexString(String str) {
        int strIdx = strTable.indexOf(str);
        if (strIdx == -1) {
            strIdx = strTable.size();
            strTable.add(str);
        }
        return strIdx;
    }

    public void setTick(int tick) {
        this.tick = tick;
    }

    public static AspectWriter newWriter(AspectSerializer ser, String aspectPath)
        throws AspectNotFound, IOException {

        $msgTypes:instantiate_msg_type()$

        throw new AspectNotFound();
    }

    $msgTypes:define_writers()$

    public void close() throws IOException { ser.close(strTable); }
}
>>

instantiate_msg_type(msgType) ::= <<
if (aspectPath.equals("$msgType.aspectPath$")) {
    return new $msgType.readWritePkg$.Writer(ser);
}
>>

define_writers(msgType) ::= <<
public void write($msgType.protoPkg$.$msgType.protoFullCls$ msg) throws IOException {
    throw new MismatchedAspectClass("Incorrect Writer instantiated");
}
>>
