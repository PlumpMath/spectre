aspect_reader(msgTypes) ::= <<

package skadistats.spectre;

import java.io.InputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.LinkedList;
import org.apache.mahout.math.Varint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import skadistats.spectre.err.*;
import skadistats.spectre.persist.AspectDeserializer;


public abstract class AspectReader {
    private final Logger log = LoggerFactory.getLogger(getClass());

    protected int replayId;
    protected int tick;
    protected List<String> strTable;
    protected AspectDeserializer deser;

    public AspectReader(AspectDeserializer deser) throws IOException {
        this.deser = deser;
        this.strTable = deser.readStringTable();
        this.replayId = deser.getReplayId();
    }

    public static AspectReader newReader(AspectDeserializer deser, String aspectPath) 
        throws AspectNotFound, IOException {
    
        $msgTypes:instantiate_msg_type()$

        throw new AspectNotFound();
    }

    $msgTypes:define_iters()$

    public String lookupString(int index) { return strTable.get(index); }
    public int getReplayId() { return replayId; }
    public int getTick() { return tick; }
}
>>

instantiate_msg_type(msgType) ::= <<
if (aspectPath.equals("$msgType.aspectPath$")) {
    return new $msgType.readWritePkg$.Reader(deser);
}
>>

define_iters(msgType) ::= <<
public Iterable<$msgType.protoPkg$.$msgType.protoFullCls$> iter$msgType.protoCls$() {
    throw new RuntimeException("Incorrect Reader instantiated");
}
>>
