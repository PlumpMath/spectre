aspect_reader(msgTypes) ::= <<

package skadistats.spectre;

import java.io.InputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.List;
import java.util.LinkedList;
import org.apache.mahout.math.Varint;
import skadistats.spectre.proto.Util;


public abstract class AspectReader {
    protected String baseDir;
    protected int initReplayId;
    protected int replayId;
    protected int tick;
    protected List<String> strTable;
    protected InputStream in;

    public AspectReader(String baseDir, int replayId) {
        this.baseDir = baseDir;
        this.initReplayId = replayId;
        this.strTable = new LinkedList<String>();
    }

    public boolean hasNext() {
        try {
            DataInputStream din = new DataInputStream(this.in);
            this.in.mark(32);
            int msgType = Varint.readUnsignedVarInt(din);
            this.in.reset();
            
            return true;
        } catch(IOException ex) {
            return false;
        }
    }

    public int consumeIfInternal(int msgType) throws IOException {
        switch(msgType) {
            case 0: // Util.Segment
                Util.Segment seg = Util.Segment.parseFrom(this.in);
                this.tick = seg.getTick();
                break;
            case 1: // Util.Info
                Util.Info info = Util.Info.parseFrom(this.in);
                this.replayId = info.getReplayId();
                break;
            case 2: // Util.StringTable
                Util.StringTable st = Util.StringTable.parseFrom(this.in);
                this.strTable = st.getValueList();
                break;
        }
        return msgType;
    }

    public static AspectReader newReader(String baseDir, String aspectPath, int replayId) {
    
        $msgTypes:instantiate_msg_type()$

        throw new RuntimeException("Unknown Aspect: "+aspectPath);
    }

    $msgTypes:define_iters()$

}
>>

instantiate_msg_type(msgType) ::= <<
if (aspectPath.equals("$msgType.aspectPath$")) {
    return new $msgType.readWritePkg$.Reader(baseDir, replayId);
}
>>

define_iters(msgType) ::= <<
public Iterable<$msgType.protoPkg$.$msgType.protoFullCls$> iter$msgType.protoCls$() {
    throw new RuntimeException("Incorrect Reader instantiated");
}
>>
